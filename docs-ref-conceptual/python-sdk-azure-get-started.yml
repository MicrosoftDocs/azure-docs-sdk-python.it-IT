### YamlMime:YamlDocument
documentType: Tutorial
title: Introduzione allo sviluppo per il cloud con le librerie di Azure per Python
metadata:
  title: Introduzione alle librerie di Azure per Python
  description: Informazioni su come creare risorse cloud di Azure e come connetterle e usarle nelle applicazioni Python.
  audience: Developer
  level: Beginner
  nextTutorialHref: /python/api/overview/azure/?view=azure-python
  nextTutorialTitle: Informazioni di riferimento su Python SDK
  displayType: two-column
  interactive: azurecli
  ms.openlocfilehash: 38b8fdd9f83dfd096c8efcac8d73fe254dd35326
  ms.sourcegitcommit: c57305dad01cad925faf50a64953c408429d4ca9
  ms.translationtype: HT
  ms.contentlocale: it-IT
  ms.lasthandoff: 12/05/2017
items:
- durationInMinutes: 
  content: "Questa guida illustra l'utilizzo di alcune librerie di Azure per Python.  \n"
- title: Prerequisiti
  durationInMinutes: 5
  content: "- Un account Azure. Se non è disponibile, [ottenere una versione di valutazione gratuita](https://azure.microsoft.com/free/).\n- [Python](https://www.python.org/downloads/)\n- [Azure Cloud Shell](https://docs.microsoft.com/azure/cloud-shell/quickstart) o [interfaccia della riga di comando di Azure 2.0](https://docs.microsoft.com/cli/azure/install-az-cli2).\n"
- title: Configurare l'autenticazione
  durationInMinutes: 5
  content: "> [!IMPORTANT]\n> Questo approccio è consigliato come esperienza di avvio rapido per gli sviluppatori. Per finalità di produzione, usare [ADAL](https://github.com/AzureAD/azure-activedirectory-library-for-python) o il proprio sistema di credenziali.\n> Eventuali modifiche apportate alla configurazione dell'interfaccia della riga di comando influiranno sull'esecuzione dell'SDK.\n\nL'SDK consente di creare un client tramite la sottoscrizione attiva dell'interfaccia della riga di comando.\n\nPer definire le credenziali attive, usare [az login](https://docs.microsoft.com/cli/azure/authenticate-azure-cli).\nL'ID sottoscrizione predefinito corrisponde a quello disponibile oppure è possibile definirlo usando [az account](https://docs.microsoft.com/cli/azure/manage-azure-subscriptions-azure-cli).\n\n```python\nfrom azure.common.client_factory import get_client_from_cli_profile\nfrom azure.mgmt.compute import ComputeManagementClient\n\nclient = get_client_from_cli_profile(ComputeManagementClient)\n```\n"
- title: Creare un ambiente virtuale
  durationInMinutes: 5
  content: "> [!IMPORTANT]\n> La creazione di un ambiente virtuale è facoltativa, ma consigliata.\n\nCreare un ambiente virtuale in Bash (Linux o [Bash per Windows](https://msdn.microsoft.com/commandline/wsl/about)):\n```bash\npip install virtualenv\nvirtualenv mytestenv\ncd mytestenv\nsource ./bin/activate\n```\n\nCreare un ambiente virtuale in Powershell:\n```powershell\npip install virtualenv\nvirtualenv mytestenv\ncd mytestenv\n.\\Scripts\\activate\n```\n"
- title: Creare una macchina virtuale Linux
  durationInMinutes: 5
  content: >
    Questo codice crea una nuova VM Linux denominata `testLinuxVM` in un gruppo di risorse `sampleVmResourceGroup` in esecuzione nell'area di Azure Stati Uniti orientali.


    Autenticazione:

    ```azcli

    az login

    ```

    Creare un gruppo di risorse:

    ```azurecli-interactive

    az group create -l eastus --n sampleVmResourceGroup

    ```


    Creare una rete virtuale e una subnet:

    ```azurecli-interactive

    az network vnet create -g sampleVmResourceGroup -n azure-sample-vnet --address-prefix 10.0.0.0/16 --subnet-name azure-sample-subnet --subnet-prefix 10.0.0.0/24

    ```


    Creare un indirizzo IP pubblico:

    ```azurecli-interactive

    az network public-ip create -g sampleVmResourceGroup -n azure-sample-ip --allocation-method Dynamic --version IPv6

    ```

    Creare un client di interfaccia di rete:

    ```azurecli-interactive

    az network nic create -g sampleVmResourceGroup --vnet-name azure-sample-vnet --subnet azure-sample-subnet -n azure-sample-nic --public-ip-address azure-sample-ip

    ```


    ```python

    from azure.mgmt.network import NetworkManagementClient

    from azure.mgmt.compute import ComputeManagementClient

    from azure.common.client_factory import get_client_from_cli_profile


    # Azure Datacenter

    LOCATION = 'eastus'


    # Resource Group

    GROUP_NAME = 'sampleVmResourceGroup'


    # Network

    VNET_NAME = 'azure-sample-vnet'

    SUBNET_NAME = 'azure-sample-subnet'


    # VM

    NIC_NAME = 'azure-sample-nic'

    VM_NAME = 'testLinuxVM'


    USERNAME = 'userlogin'

    PASSWORD = 'Pa$$w0rd91'


    IP_ADDRESS_NAME='azure-sample-ip'


    VM_REFERENCE = {
        'linux': {
            'publisher': 'Canonical',
            'offer': 'UbuntuServer',
            'sku': '16.04.0-LTS',
            'version': 'latest'
        },
        'windows': {
            'publisher': 'MicrosoftWindowsServerEssentials',
            'offer': 'WindowsServerEssentials',
            'sku': 'WindowsServerEssentials',
            'version': 'latest'
        }
    }



    def run_example():

        compute_client = get_client_from_cli_profile(ComputeManagementClient)
        network_client = get_client_from_cli_profile(NetworkManagementClient)

        # get nic id
        nic = network_client.network_interfaces.get(GROUP_NAME, NIC_NAME)

        # Create Linux VM
        print('\nCreating Linux Virtual Machine')
        vm_parameters = create_vm_parameters(nic.id, VM_REFERENCE['linux'])
        print(vm_parameters)
        async_vm_creation = compute_client.virtual_machines.create_or_update(
            GROUP_NAME, VM_NAME, vm_parameters)
        async_vm_creation.wait()


    def create_vm_parameters(nic_id, vm_reference):
        """Create the VM parameters structure.
        """
        return {
            'location': LOCATION,
            'os_profile': {
                'computer_name': VM_NAME,
                'admin_username': USERNAME,
                'admin_password': PASSWORD
            },
            'hardware_profile': {
                'vm_size': 'Standard_DS1_v2'
            },
            'storage_profile': {
                'image_reference': {
                    'publisher': vm_reference['publisher'],
                    'offer': vm_reference['offer'],
                    'sku': vm_reference['sku'],
                    'version': vm_reference['version']
                },
            },
            'network_profile': {
                'network_interfaces': [{
                    'id': nic_id,
                }]
            },
        }


    if __name__ == "__main__":
        run_example()
    ```


    Al termine del programma, verificare la macchina virtuale nella sottoscrizione con l'interfaccia della riga di comando di Azure 2.0:


    ```azurecli-interactive

    az vm list --resource-group sampleVmResourceGroup

    ```


    Dopo avere verificato che il codice abbia funzionato, usare l'interfaccia della riga di comando per eliminare la VM e le risorse.


    ```azurecli-interactive

    az group delete --name sampleVmResourceGroup

    ```
- title: Distribuire un'app Web da un repository di GitHub
  durationInMinutes: 5
  content: "Questo codice distribuisce un'applicazione Web Flask dal ramo `master` in un repository GitHub in una nuova [app Web del servizio app di Azure](https://docs.microsoft.com/azure/app-service-web/app-service-web-overview) in esecuzione nel livello gratuito. \n\nPrima di iniziare, creare una copia tramite fork di https://github.com/Azure-Samples/python-docs-hello-world\n\nAutenticazione:\n```azcli\naz login\n```\nCreare un gruppo di risorse:\n```azurecli-interactive\naz group create -l eastus -n sampleWebResourceGroup\n```\n\nCreare un piano di servizio app gratuito:\n```azurecli-interactive\naz appservice plan create -g sampleWebResourceGroup -n sampleFreePlan  --sku Free\n```\n\n```python\nfrom azure.mgmt.web import WebSiteManagementClient\nfrom azure.mgmt.web.models import Site, SiteSourceControl, SiteConfig\nfrom azure.common.client_factory import get_client_from_cli_profile\n\nRESOURCE_GROUP_NAME = 'sampleWebResourceGroup'\nSERVICE_PLAN_NAME = 'sampleFreePlanName'\nWEB_APP_NAME = 'sampleflaskapp123'\nREPO_URL = 'GitHub_Repository_URL'\n\n#log in\nweb_client = get_client_from_cli_profile(WebSiteManagementClient)\n\n# get service plan id\nservice_plan = web_client.app_service_plans.get(RESOURCE_GROUP_NAME, SERVICE_PLAN_NAME)\n\n# create a web app\nsiteConfiguration = SiteConfig(\n    python_version='3.4',\n)\nsite_async_operation = web_client.web_apps.create_or_update(\n    RESOURCE_GROUP_NAME,\n    WEB_APP_NAME,\n    Site(\n        location='eastus',\n        server_farm_id=service_plan.id,\n        site_config=siteConfiguration\n    ),\n)\n\nsite = site_async_operation.result()\nprint('created webapp: ' + site.default_host_name)\n\n# continuous deployment with GitHub\nsource_control_async_operation = web_client.web_apps.create_or_update_source_control(\n    RESOURCE_GROUP_NAME,\n    WEB_APP_NAME,\n    SiteSourceControl(\n        location='GitHub',\n        repo_url= REPO_URL,\n        branch='master'\n    )\n)\n\nsource_control = source_control_async_operation.result()\nprint(\"added source control to: \" + source_control.name + \"azurewebsites.net\")\n```\n\nAprire un browser che punta all'applicazione usando l'interfaccia della riga di comando:\n```azurecli-interactive\naz appservice web browse --resource-group sampleWebResourceGroup --name YOUR_APP_NAME\n```\n\nRimuovere l'app Web e il piano dalla sottoscrizione dopo avere verificato la distribuzione. \n```azurecli-interactive\naz group delete --name sampleWebResourceGroup\n```\n"
- title: Connettersi al database SQL
  durationInMinutes: 5
  content: "Questo codice crea un nuovo database SQL con una regola del firewall che consente l'accesso remoto e quindi vi si connette usando il driver Microsoft ODBC. Pyodbc usa il driver ODBC di Microsoft su Linux per connettersi ai database SQL. \n\nAutenticazione:\n```azcli\naz login\n```\nCreare un gruppo di risorse:\n```azurecli-interactive\naz group create -l eastus -n azure-sample-group\n```\n\nCreare un server SQL:\n```azurecli-interactive\naz sql server create --admin-password HusH_Sec4et --admin-user mysecretname -l eastus -n samplesqlserver123 -g azure-sample-group\n```\n\nAggiungere una regola del firewall:\n```azurecli-interactive\naz sql server firewall-rule create --end-ip-address 167.220.0.235 --name firewall_rule_name_123.123.123.123 --resource-group azure-sample-group --server samplesqlserver123 --start-ip-address 123.123.123.123\n```\n\nCreare un database SQL:\n```azurecli-interactive\naz sql db create --name sample-db --resource-group azure-sample-group --server samplesqlserver123\n```\n\n```python\nfrom azure.mgmt.sql import SqlManagementClient\nfrom azure.common.client_factory import get_client_from_cli_profile\nimport pyodbc\n\nLOCATION = 'eastus'\nGROUP_NAME = 'azure-sample-group'\nSERVER_NAME = 'samplesqlserver123'\nDATABASE_NAME = 'sample-db'\nUSER_NAME ='mysecretname'\nPASSWORD='HusH_Sec4et'\n\n# authenticate\nsql_client = get_client_from_cli_profile(SqlManagementClient)\n\n\ndef run_example():\n# Get SQL database\nprint('Get SQL database')\ndatabase = sql_client.databases.get(\n    GROUP_NAME,\n    SERVER_NAME,\n    DATABASE_NAME\n)\nprint(database)\nprint(\"\\n\\n\")\n\n\ndef create_and_insert():\nserver = SERVER_NAME+'.database.windows.net'\ndatabase = DATABASE_NAME\nusername = USER_NAME\npassword = PASSWORD\ndriver = '{ODBC Driver 13 for SQL Server}'\ncnxn = pyodbc.connect(\n    'DRIVER=' + driver + ';PORT=1433;SERVER=' + server + ';PORT=1443;DATABASE=' + database + ';UID=' + username + ';PWD=' + password)\ncursor = cnxn.cursor()\ntsql = \"CREATE TABLE CLOUD (name varchar(255), code int);\"\ntsqlInsert = \"INSERT INTO CLOUD (name, code) VALUES ('Azure', 1); \"\nselectValues = \"SELECT * FROM CLOUD\"\nwith cursor.execute(tsql):\n    print('Successfully created table!')\nwith cursor.execute(tsqlInsert):\n    print('Successfully inserted data into table')\ncursor.execute(selectValues)\nrow = cursor.fetchone()\nwhile row:\n    print(str(row[0]) + \" \" + str(row[1]))\n    row = cursor.fetchone()\ncnxn.commit()\n\nif __name__ == \"__main__\":\nrun_example()\ncreate_and_insert()\n```\n\nDopo avere verificato che il codice abbia funzionato, usare l'interfaccia della riga di comando per eliminare il database SQL e le rispettive risorse.\n\n```azurecli-interactive\naz group delete --name azure-sample-group\n```\n"
- title: Scrivere un BLOB in un nuovo account di archiviazione
  durationInMinutes: 5
  content: "Autenticazione:\n```azcli\naz login\n```\nCreare un gruppo di risorse:\n```azurecli-interactive\naz group create -l eastus -n sampleStorageResourceGroup\n```\n\nCreare un account di archiviazione:\n```azurecli-interactive\naz storage account create -n samplestorageaccountname -g sampleStorageResourceGroup -l eastus --sku Standard_RAGRS\n```\n\nQuesto codice crea un [account di archiviazione di Azure](https://docs.microsoft.com/azure/storage/storage-introduction) e quindi usa le librerie di archiviazione di Azure per Python per creare un nuovo file HTML nel cloud. \n```python\nfrom azure.storage import CloudStorageAccount\nfrom azure.storage.blob import PublicAccess\nfrom azure.storage.blob.models import ContentSettings\nfrom azure.common.client_factory import get_client_from_cli_profile\nfrom azure.mgmt.storage import StorageManagementClient\n\nRESOURCE_GROUP = 'sampleStorageResourceGroup'\nSTORAGE_ACCOUNT_NAME = 'samplestorageaccountname'\nCONTAINER_NAME = 'samplecontainername'\n\n# log in\nstorage_client = get_client_from_cli_profile(StorageManagementClient)\n\n# create a public storage container to hold the file\nstorage_keys = storage_client.storage_accounts.list_keys(RESOURCE_GROUP, STORAGE_ACCOUNT_NAME)\nstorage_keys = {v.key_name: v.value for v in storage_keys.keys}\n\nstorage_client = CloudStorageAccount(STORAGE_ACCOUNT_NAME, storage_keys['key1'])\nblob_service = storage_client.create_block_blob_service()\n\nblob_service.create_container(CONTAINER_NAME, public_access=PublicAccess.Container)\n\nblob_service.create_blob_from_bytes(\n    CONTAINER_NAME,\n    'helloworld.html',\n    b'<center><h1>Hello World!</h1></center>',\n    content_settings=ContentSettings('text/html')\n)\n\nprint(blob_service.make_blob_url(CONTAINER_NAME, 'helloworld.html'))\n```\nPer verificare che il contenuto sia stato caricato correttamente, passare all'URL stampato. \n\nPulire l'account di archiviazione usando l'interfaccia della riga di comando:\n```azurecli-interactive\naz group delete --name sampleStorageResourceGroup\n```\n"
- title: Passaggi successivi
  content: "L'introduzione alle librerie di Azure per Python è completata.\n\n- Per altre informazioni su come usare le librerie di gestione di Azure per Python per gestire le risorse e l'automazione delle attività, vedere il codice di esempio per [macchine virtuali](python-sdk-azure-web-apps-samples.md), [app Web](python-sdk-azure-web-apps-samples.md) e [database SQL](python-sdk-azure-sql-database-samples.md).\n\n- Le [informazioni di riferimento](/python/api/overview/azure/?view=azure-python) sono disponibili per tutti i pacchetti.\0"
